unit TestuXPathExtensions;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.Classes, uXPathExtensions;//, Data.DB, Datasnap.DBClient;

type
  // Test methods for class TContentList

  TestXPathExtensions = class(TTestCase)
  strict private
    FContentList: TXPathEvaluator;
  private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Test1;
    procedure Test1a;
    procedure Test2;
    procedure Test3;
    procedure Test4;
    procedure Test4a;
    procedure Test5;
    procedure Test5a;
    procedure Test5b;
    procedure Test5c;
    procedure Test6;
    procedure Test7;
  end;


implementation

uses
  Winapi.msxmlIntf, uXMLUtils;



{ TestXPathExtensions }

procedure TestXPathExtensions.SetUp;
begin
//  FContentList := TContentList.Create();

end;

procedure TestXPathExtensions.TearDown;
begin
  FContentList.Free;

end;

procedure TestXPathExtensions.Test1;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  FContentList := TXPathEvaluator.Create('not(f:contained)');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;

procedure TestXPathExtensions.Test1a;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><contained /></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  FContentList := TXPathEvaluator.Create('f:contained');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;


procedure TestXPathExtensions.Test2;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  FContentList := TXPathEvaluator.Create('parent::f:contained and f:contained');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckFalse(Actual);
end;

procedure TestXPathExtensions.Test3;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  FContentList := TXPathEvaluator.Create('not(parent::f:contained and f:contained)');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;

procedure TestXPathExtensions.Test4;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

//  FContentList := TContentList.Create('not(exists(f:contained/*/f:meta/f:versionId)) and not(exists(f:contained/*/f:meta/f:lastUpdated))');
  FContentList := TXPathEvaluator.Create('not(exists(f:contained/*/f:meta/f:versionId))');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;


procedure TestXPathExtensions.Test4a;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  FContentList := TXPathEvaluator.Create('not(exists(f:contained/*/f:meta/f:versionId)) and not(exists(f:contained/*/f:meta/f:lastUpdated))');
//  FContentList := TContentList.Create('not(exists(f:contained/*/f:meta/f:versionId))');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;

procedure TestXPathExtensions.Test5;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><subject><reference value="#pat1"/></subject></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  //todo: change quotes ??

  FContentList := TXPathEvaluator.Create('starts-with(//f:reference/@value, "#")');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;

procedure TestXPathExtensions.Test5a;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><subject><reference value="pat1"/></subject></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  //todo: change quotes ??
  FContentList := TXPathEvaluator.Create('starts-with(//f:reference/@value, "#")');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckFalse(Actual);
end;

procedure TestXPathExtensions.Test5b;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><subject><reference value="#pat1"/></subject></Patient>';

  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  //todo: change quotes ??
  FContentList := TXPathEvaluator.Create('not(starts-with(//f:reference/@value, ''#''))');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckFalse(Actual);
end;

procedure TestXPathExtensions.Test5c;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><subject><reference value="pat1"/></subject></Patient>';
  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  //todo: change quotes ??
  FContentList := TXPathEvaluator.Create('not(starts-with(//f:reference/@value, ''#''))');
  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;


procedure TestXPathExtensions.Test6;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><subject><reference value="pat1"/></subject></Patient>';
  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  //todo: change quotes ??


//  FContentList := TXPathEvaluator.Create('exists(ancestor::*[self::f:entry or self::f:parameter]/f:resource/f:*/f:contained/f:*[f:id/@value=substring-after(current()/f:reference/@value, "#")]|/*/f:contained/f:*[f:id/@value=substring-after(current()/f:reference/@value, "#")])');

  FContentList := TXPathEvaluator.Create('ancestor::*[self::f:entry or self::f:parameter]/f:resource/f:*/f:contained/f:*[f:id/@value=substring-after(/f:reference/@value, "#")]');


  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;


procedure TestXPathExtensions.Test7;
var
  Text: string;
  Doc: IXMLDOMDocument3;
  Node: IXMLDOMNode;
  Actual: Boolean;
begin
  Text := '<?xml version="1.0"?><Patient xmlns="http://hl7.org/fhir"><subject><reference value="pat1"/></subject></Patient>';
  Doc := TXPath.Create(Text, ['http://hl7.org/fhir'], ['f']);
  Node := Doc.documentElement;

  FContentList := TXPathEvaluator.Create('starts-with(//f:reference/@value, "#") or starts-with(//f:reference/@value, "?")');
//  FContentList := TXPathEvaluator.Create('not(starts-with(//f:reference/@value, ''#''))');


//  FContentList := TXPathEvaluator.Create('(count(f:numerator) = count(f:denominator))');// and ((count(f:numerator) > 0) or (count(f:extension) > 0))
//  (count(f:numerator) = count(f:denominator)) and ((count(f:numerator) > 0) or (count(f:extension) > 0))

  FContentList.Compile;
  Actual := FContentList.Evaluate(Node);
  CheckTrue(Actual);
end;


initialization

// Register any test cases with the test runner
RegisterTests([TestXPathExtensions.Suite]);

end.
